
MAC0438-2012: Programação Concorrente.
Terceiro Exercício-Programa: Simulação de Montanha-Russa

Alunos:                     Nº USP:
  Thiago de Gouveia Nunes     6797289
  Wilson Kazuo Mizutani       6797230

I. Organização dos arquivos.

  Nosso EP deve apresentar a seguinte organização de arquivos e pastas:

    ep3-thiago-wilson/
    |- Makefile
    |- objs.makefile
    |- deps.makefile
    |- CMakeLists.txt
    |- alternative_build.sh
    |- LEIAME
    |- src/
    |  |- main.cxx
    |  |- ...demais arquivos de código fonte...
      

II. Compilação.

  O programa vem com um Makefile que, na maioria dos casos, deve ser o
suficiente para compilar o EP com o comando:

  $ make

  Mas encontramos alguns casos (como o Ubuntu 12.4 em algumas máquinas) nos
quais a biblioteca PTHREAD não está no lugar usual no sistema. Para isso,
fizemos um CMake (www.cmake.org) que é capaz de encontrar a biblioteca PTHREAD
no sistema e gerar um Makefile apropriado. Para usá-lo, basta ter o cmake (2.8+)
instalado e rodar o seguinte comando a partir da raiz do projeto:

  $ ./alternative_build.sh

  Isso efetivamente cria uma parta build/ na raiz que conterá arquivos internos
usados na compilação. Ela pode ser posteriormente removida sem problemas. Talvez
seja necessário conferir permissão de execução ao script "alternative_build.sh".
  Esperamos que não seja necessário usar essa alternativa.

III. Ferramentas usadas.

  Nosso Exercício-Programa foi escrito em C++ padrão, usando vários headers da
STL convencional, a biblioteca PTHREAD para programação concorrente, e o a
biblioteca semaphore POSIX (do semaphore.h) para sincronização por semáforos.

IV. Modo de uso do programa.

  Nosso programa segue a seguinte assinatura de linha de comando:

    ./ep3 [-d] [-w] <t> <m> <C>

  Legenda:

    [*]       Argumento opcional.

    <*>       Argumento obrigatório.

    -d        Ativa modo de depuração, no qual várias mensagens contendo
              informações internas são exibidas durante a execução do programa.

    -w        Ativa o modo de alerta, no qual mensagens de alerta ou perigo são
              exibidas em situações extremas (como falha na criação das
              threads).

    t         (float) Taxa de chegada dos passageiros.

    m         (unsigned int) Número de carros na montanha russa.

    C         (unsigned int) Capacidade dos carros da montanha russa.


V. Implementação de monitor

  A implementação do monitor está dividida em duas partes: a classe Monitor e a
classe RollerCoasterMonitor, que herda da primeira. Elas podem ser encontradas
nos arquivos monitor.h/cxx e rollercoastermonitor.h/cxx, respectivamente.
  As operações básicas empty(cv), wait(cv), wait(cv,rank), signal(cv),
signal_all(cv) e minrank(cv) estão na classe Monitor. São declaradas nas linhas
28-32 do arquivo monitor.h, e implementadas nas linhas 43-79 do arquivo
monitor.cxx. No caso, fizemos ambas as versões de 'wait' em um único método,
cujo segundo parâmetro tem um valor padrão e portanto pode ser omitido quando
chamado.
  Alguns detalhes: as "variáveis de condição" são todas implementadas
com suporte a prioridades, sendo passado ao seu construtor a quantidade de
níveis de prioridade com o qual se quer que a variável trabalhe. Além disso,
fizemos também as operações count(cv), que conta quantas threads estão esperando
pela variável cv, e signal_and_fetch(cv), que não só acorda a próxima thread
como também a devolve (caso não haja nenhuma ele devolve NULL). Todas essas
operações básicas são protegidas, portanto apenas classes que herdam de Monitor
podem usá-las diretamente.
  As operaçoes 'pegaCarona', 'carrega' e 'descarrega' pertencem à classe
RollerCoasterMonitor. São declaradas nas linhas 24-26 do arquivo
rollercoastermonitor.h e implementadas nas linhas 13-68 do arquivo
rollercoastermonitor.cxx. Acrescentamos também a operação 'ride', chamada pelos
carros.
  A o herdar da classe Monitor, fica a cargo da classe filha garantir a exclusão
mútua em suas operações criando um lock para 'mutex_', um atributo protegido
herdado. As operações básicas (wait, signal, ...) assumem que o método que as
chamou tenha feito isso, pois elas não adquirem lock nenhum. Mas existem outras
operações na classe Monitor que são de uso público e, portanto, adquirem a trava
sozinhas (isso é, são thread-safe).

VI. Informações úteis:

  -)  Nossa unidade de tempo é de 100 milissegundos. Portanto, em geral os
      carros levam 10 segundos para completar uma volta na montanha-russa.
  -)  Há uma breve documentação no cabeçalho de cada classe e das principais
      funções.











